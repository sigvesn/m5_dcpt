#include "buffer.hh"
#include "interface.hh"

#include <iostream>
#include <algorithm>

using namespace std;

void circular_buffer::push(int64_t value)
{
    if (buffer.size() == buffer_size)
        buffer.pop_front();

    buffer.push_back(value);
}

dcpt_table_entry& dcpt_table::insert(Addr pc)
{
	// LRU-based eviction

	program_counters.push_front(pc);

	// Delete existing pc, promoting it to MRU
	std::list<Addr>::iterator existing = std::find(program_counters.begin(), program_counters.end(), pc);
	if (existing != program_counters.end()) {
		program_counters.erase(existing);
	}

	// Evict LRU
	if (program_counters.size() > ENTRY_TABLE_SIZE) {
		Addr old_pc = program_counters.back();
		program_counters.pop_back();
		table.erase(old_pc);
    }

    return table[pc];
}

dcpt_table_entry& dcpt_table::lookup(Addr pc, bool& inserted)
{
    if (table.find(pc) == table.end()) {
		inserted = true;
        return insert(pc);
    } else {
		inserted = false;
        return table[pc]; // TODO: try .at() to verify existence and no foobary behaviour
    }
}
